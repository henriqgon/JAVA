2) Crie uma classe (superclasse) chamada ContaBancaria. Adicione os seguintes atributos privados:
titular (String)
saldo (double)
rendaMensal(double)

Valide se a variavel titular não está vazia. Se estiver vazia atribua o valor “não identificado”.
Para validar se uma váriavel do tipo String contém informação diferente de espaço vazio, utilize o médo
equals().

Valide se a rendaMensal é maior ou igual à dois salários mínimos, se não for maior atribua o valor de
dois salários mínimos.

Crie o método depositar(double montante), adicione o valor da variável montante na variável saldo.

Crie o método sacar(double montante), verifique se o valor na variável saldo é maior que o valor
passado por parâmetro, se for, subraia o valor solicitado da variável saldo e envie uma mensagem
“saque efetuado com sucesso”, senão envie a mensagem “saldo insuficiente”.

Crie o método verificarSaldo() que imprime para o usuário uma mensagem : “O saldo na conta de
<<titular>> é: R$<<saldo>>”. Substitua dos valores entre <<>> pelas variáveis correspondentes.
Chame sempre esse método depois dos métodos depositar() e sacar(), seja na classe de teste ou
dentro dos métodos depois das operações realizadas.

Crie uma classe (subclasse) chamada ContaPouPanca. Essa classe herdará da classe
ContaBancaria. Adicione o atributo privado taxaJuros (double)
A variável taxaJuros só poderá aceitar valores entre 0.6 a 2.8.

Crie os métodos getter e setter para o atributo.

Crie um método aplicarJuros(). Esse método deverá acrescentar a porcentagem da variavel
taxaJuros na variável saldo.

Crie uma classe (subclasse) chamada ContaCorrente. Essa classe herdará da classe ContaBancaria.
Adicione o atributo privado limiteEspecial (double)
Valide a variável limiteEspecial conforme a variável rendaMensal. O limite especial na sua conta não
pode ultrapassar 40% do seu salário.

Implemente Getterrs e Setters em todos os atributos de todas as classes.
Crie uma classe Principal para testar o programa com 3 objetos de cada classe. Teste todos os
métodos, inclusive enviando valores para que as validações sejam testadas corretamente.
